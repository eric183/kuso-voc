// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

model Account {
  id                 String   @id @default(cuid())
  userId             String   @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.LongText	
  access_token       String?  @db.LongText	
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  // avatar    String


  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isAdmin   Boolean   @default(false)
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?     @unique
  password      String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  words     Word[]

  // id        String    @id @default(cuid())
  // name      String
  // email     String    @unique

  // emailVerified DateTime?
  // image         String?
  // sessions      Session[]
  // accounts      Account[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @db.LongText	
  userId       String   @unique
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Word {
  id    String @id @default(cuid())
  score Int    @default(0)

  wordData  WordData? @relation(fields: [word], references: [searchingWord])
  word      String
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([word])
}

model WordData {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  searchingWord   String   @unique
  searchingEngine String
  translations    Json?

  userWords Word[]
  // translations    Translation[]
  // User            User[]
  // userId          Int?
  // @@unique([searchingWord])
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model Translation {
//   id                String  @id @default(cuid())
//   pos               String
//   // terms             String
//   terms             Term[]
//   entries           Entry[]
//   // TranslationCard   WordCard? @relation(fields: [translationCardId], references: [id])
//   translationCardId String?
// }

// model Term {
//   id            String       @id @default(cuid())
//   explain       String
//   Translation   Translation? @relation(fields: [translationId], references: [id])
//   translationId String?
// }

// model Entry {
//   id                   String               @id @default(cuid())
//   word                 String
//   reverse_translations ReverseTranslation[]
//   score                Float                @default(0)
//   Translation          Translation?         @relation(fields: [translationId], references: [id])
//   translationId        String?
// }

// model ReverseTranslation {
//   id      String  @id @default(cuid())
//   name    String
//   Entry   Entry?  @relation(fields: [entryId], references: [id])
//   entryId String?
// }
