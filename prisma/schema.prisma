generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.LongText
  access_token      String?  @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isAdmin           Boolean  @default(false)
  isActive          Boolean  @default(true)
  isDeleted         Boolean  @default(false)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  words         Word[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @db.LongText
  userId       String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Word {
  id        String    @id @default(cuid())
  score     Int       @default(0)
  master    Boolean   @default(false)
  wordData  WordData? @relation(fields: [word], references: [searchingWord])
  word      String    @unique
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model WordData {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  searchingWord   String   @unique
  searchingEngine String
  translations    Json?
  userWords       Word[]
}
